szybsza wersja pythona

jednym z popularniejszych zjawisk trikow z w historii ilustam lat co sie tam przewija przez ostatnie kilka li kilkanascie lat jest ni to przekret ni to nie przekret

o azwi o nazwie szybsza wersja pythona

co raz to jakies ludzki ludki wpadaja na pomysla zeby tam zrobic pythona tylko zeby nieco sy szybciej dzialal powaga

no to oni pisza taki twoj twor co ma skladnie podobna i tam kilka sk slow kluczowych z pythona tych bardziej kluczowych jakostam implementuja t robia pomiary benchar bencha benchmarki

i jest pierdyliard razy szybciej win wi wygrana ki m ki jestem hardkorem normalnie


oczywiscie chuja to daje bo to potem nie jest z adne zadnea biblioteka kompy kompatybilna a dlaczego nie jest

bo python to jest takie cos co latwo napisac cos malego co zadziala na jedny jednym komputerze w krotkim w zadanym odstepie jakby w tym czasie co zostalo napisane i przetestowane na tym jednym dwoch czy mapru 

czy paru k czyku czy kulk kilku przypadkach testowa testowych to co tam ten co pisze te skrypty testowal


natomiast jak sie chce napisac cos co sie potem c bedzie dystrybuowalo u innych osob i zeby dla innych osob i zeby to dzialalo w ogole t jakis program tak ogolnie a nie za ze akurat zadzialal bo sie dobrze

chmury na nieby niebie ulozyly to sie nie da


dlaczego sie nie da bo tam sie biblioteki i opieraja na defaultach ktore sa jakby pol jawne pol udokumentowane w i w ogole a akurat moga moge de te f defaulty jakby akurat dobrze sie wpasowac a innym razem juz nie

i na przyklad sie jak sie napisze jakis program do przetwarzania tekstow i sie ma wrazenie ze juz dzialoa to sie moze okazac za jakis z czas ze przykladowo jak plik jest w unikodzie albo nie jest albo costam

to k ktoras biblioteka akurat zakladala co innego i ju sie cos bedzie k wykrzaczac i jest juz problem


tam po prostu nie da sie niczego przetestowac  nie a nie ma c nie ma tez czegos takiego jak definicja pythona  to jest akutalna wersja jakby historyjki pythonowej dysty dystrybuowanej prze je przez jedna organizacja lab albo druga


zawsze tez moze byc tak ze oni postawno postanowia jakby podp podbic numerek jezyka czyli taki wewnetrzny fork zrobic i wprowadzic jakies istotne albo nie zmiany i jakby zabawa juz w ogole pociag odjezdza bez was


no tam nie ma zadnych typow po prostu tk tylko jakby no to co sie tam uda jakby takie proramowanie hurra optymistyczne  


roznica miedzy cep ce pe pe a pythonem jaest jest jakby taka z e w cep ce pe pe di domyslnie nie ma i chyba w ogole nawet nie ma takiej mozliwosci zeby z jednego jakby pliku kodu zrodlowego modulu do drugiego costam pozmieniac

natomiast w pythonie jakby chyba nie mza ma mozliwoci mozliwosci odwrotnej zeby sie dalo zagwarantowac ze jeden plik modul drugiemu niec nic nie pozmieniac  to jest jakby jedno wielka wielkie srodowisko n do wprowadzania

roznych zmian w roznych miesj miejscach


czyli tak jakby jeszcze raz jak ktos chce napisac program w pythonie i komuz jak komus jakby przekazac dystrybuowac to jakby musi i tka cala dystrybucje pythona razem z tym programem umieszczac i wszystkie biblioteki moduly

dodatkowe itd w ew numerki werji wersji podatwac i podawac i tam jest jakby tez bardzo duzo roznych srodko srodowisk do jakby opera operowania w ten sposob   no i czy da sie jakby pare roznych kilka roznych tego typu

programow razem jakby jako k biblioteki uzywac korzystac uruchamiac tn no mozna sie domyslic

czasami tak czasami nie


napisze to wprost ze wzgledu na to co wyprawiaja i wyprawiali niektorzy pythonowcy i co w tym bylo pisane to uzywanie to ani uzywanie ani pisanie tych niby programow a wlasciwie w pseudokodowych rozszerzen pythona nie jest

bezpieczne dla nig dla nikogo ani dla programistow ani dla uzytkownikow
